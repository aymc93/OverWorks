<!DOCTYPE html>
<html lang="fr">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title>MiniWorks ‚Äì Party Game</title>
  <style>
    :root{
      --bg:#0f0f12; --card:#15161a; --muted:#a8b0c0; --text:#f5f7ff; --accent:#ff4757; --ok:#2ed573; --warn:#ffa502;
    }
    html,body{margin:0;height:100%;font-family:system-ui,-apple-system,Segoe UI,Roboto,Inter,Arial,sans-serif;background:var(--bg);color:var(--text)}
    .wrap{max-width:1100px;margin:0 auto;padding:24px}
    h1{font-size:28px;margin:8px 0 16px}
    .row{display:flex;gap:12px;flex-wrap:wrap}
    .col{flex:1 1 320px}
    .card{background:var(--card);border-radius:16px;padding:16px;box-shadow:0 10px 30px rgba(0,0,0,.3)}
    input,button{border-radius:12px;border:1px solid #2a2c33;background:#1a1c22;color:var(--text);padding:10px 12px;font-size:14px}
    input{width:100%}
    button{cursor:pointer}
    button.primary{background:var(--accent);border:none}
    button.ghost{background:transparent;border:1px solid #333}
    .muted{color:var(--muted)}
    .grid{display:grid;gap:12px}
    .two{grid-template-columns:repeat(2,minmax(0,1fr))}
    .three{grid-template-columns:repeat(3,minmax(0,1fr))}
    .stack{display:flex; flex-direction:column; gap:8px}
    .badge{display:inline-flex;align-items:center;gap:6px;background:#1b1d24;border:1px solid #2d3038;border-radius:999px;padding:6px 10px;font-size:12px}
    .pill{border-radius:999px;padding:4px 10px;border:1px solid #2a2c33;background:#13151a}
    .center{display:flex;align-items:center;justify-content:center}
    #stage{height:360px;border-radius:18px;background:#0e1015;position:relative;overflow:hidden;border:1px solid #23252c}
    #statusBar{display:flex;justify-content:space-between;align-items:center;margin-top:8px}
    #players{max-height:260px;overflow:auto}
    .player{display:flex;justify-content:space-between;align-items:center;background:#101219;border:1px solid #22252e;border-radius:12px;padding:8px 10px}
    .player.me{outline:2px solid var(--warn)}
    .ok{color:var(--ok)} .ko{color:var(--accent)}
    #toast{position:fixed;left:50%;top:18px;transform:translateX(-50%);background:#111319;border:1px solid #2a2e39;border-radius:12px;padding:10px 14px;box-shadow:0 6px 20px rgba(0,0,0,.35);display:none}
    .small{font-size:12px}
    .key{display:inline-block;border:1px solid #2a2c33;background:#0f1116;border-radius:8px;padding:2px 6px;margin:0 2px}
    .footer{margin-top:24px;opacity:.8}
    .mono{font-family: ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, "Liberation Mono", "Courier New", monospace}
  </style>
</head>
<body>
<div class="wrap">
  <h1>üéâ MiniWorks ‚Äì Party Game (Micro-jeux)
    <span class="badge"><span id="roomBadge">room: ‚Äî</span></span>
  </h1>
  <div class="row">
    <div class="col">
      <div class="card grid">
        <div class="grid two">
          <div class="stack">
            <label for="name">Ton pseudo</label>
            <input id="name" placeholder="Aymeric" />
          </div>
          <div class="stack">
            <label for="room">Code salle</label>
            <input id="room" placeholder="ex: CAFE" maxlength="8" />
          </div>
        </div>
        <div class="row">
          <button id="create" class="primary">Cr√©er une salle</button>
          <button id="join" class="ghost">Rejoindre</button>
          <button id="copyLink" title="Copier le lien" class="ghost">üîó Partager</button>
        </div>
        <div class="grid two">
          <div class="stack">
            <span class="muted small">H√¥te</span>
            <div class="row">
              <button id="start" class="primary">‚ñ∂Ô∏è Lancer la partie</button>
              <button id="nextRound" class="ghost">‚è≠Ô∏è Prochaine manche</button>
            </div>
          </div>
          <div class="stack">
            <span class="muted small">Options</span>
            <div class="row">
              <label class="pill">‚è±Ô∏è dur√©e <input id="duration" type="number" min="2" max="12" value="5" style="width:64px;margin-left:8px"></label>
              <label class="pill">üéØ score max <input id="targetScore" type="number" min="3" max="30" value="10" style="width:72px;margin-left:8px"></label>
            </div>
          </div>
        </div>
      </div>

      <div class="card">
        <div id="stage" class="center">
          <div class="muted">Cr√©e ou rejoins une salle pour jouer. L'h√¥te lance les manches.</div>
        </div>
        <div id="statusBar">
          <div>Manche <span id="round">0</span> ‚Ä¢ <span id="phase">attente</span></div>
          <div>‚è≥ <span id="timer">‚Äî</span>s</div>
        </div>
      </div>

      <div class="card">
        <div class="row" style="justify-content:space-between;align-items:center">
          <strong>Scoreboard</strong>
          <span class="small muted">+1 point si tu r√©ussis le micro-jeu √† temps</span>
        </div>
        <div id="players" class="grid"></div>
      </div>
    </div>

    <div class="col">
      <div class="card stack">
        <strong>Comment jouer</strong>
        <ol class="muted">
          <li>Un joueur clique ¬´ Cr√©er une salle ¬ª puis partage le lien.</li>
          <li>Les autres entrent le code et cliquent ¬´ Rejoindre ¬ª.</li>
          <li>L‚Äôh√¥te lance la partie et encha√Æne les micro-jeux.</li>
          <li>Atteins le score cible pour gagner !</li>
        </ol>
        <details>
          <summary>Configuration Firebase (obligatoire pour le multi)</summary>
          <p>Dans le code ci-dessous, remplace <span class="mono">FIREBASE_*</span> par les valeurs de ton projet Firebase (web app). Active la base de donn√©es Realtime Database en mode test (ou r√®gles adapt√©es) et l‚Äôauthent anonyme.</p>
          <ul class="small">
            <li>Projet ‚Üí Build ‚Üí Authentication ‚Üí Sign-in method ‚Üí Anonymous</li>
            <li>Projet ‚Üí Build ‚Üí Realtime Database ‚Üí Cr√©er BD ‚Üí emplacement ‚Üí R√®gles lecture/√©criture pour tests</li>
          </ul>
        </details>
        <details>
          <summary>D√©ployer sur GitHub Pages</summary>
          <ol class="small">
            <li>Cr√©er un repo, ajouter ce fichier comme <span class="mono">index.html</span></li>
            <li>Commit & push sur la branche <span class="mono">main</span></li>
            <li>Settings ‚Üí Pages ‚Üí Deploy from branch ‚Üí <span class="mono">main</span> / root ‚Üí Save</li>
            <li>Attends l‚ÄôURL Pages et partage-la √† tes potes</li>
          </ol>
        </details>
      </div>
    </div>
  </div>

  <div class="footer small muted">Made for friends ‚Ä¢ Aucune donn√©e perso stock√©e en dehors des pseudos/scores ‚Ä¢ Code client only
  </div>
</div>

<div id="toast"></div>

<script type="module">
  // ===== Firebase (CDN v10+) =====
  // 1) Cr√©e un projet Firebase ‚Üí Web app ‚Üí copie les cl√©s ici
  import { initializeApp } from "firebase/app";
  import { initializeApp } from "https://www.gstatic.com/firebasejs/10.12.4/firebase-app.js";
  import { getAuth, signInAnonymously, onAuthStateChanged } from "https://www.gstatic.com/firebasejs/10.12.4/firebase-auth.js";
  import { getDatabase, ref, onValue, set, update, get, push, serverTimestamp, onDisconnect, remove } from "https://www.gstatic.com/firebasejs/10.12.4/firebase-database.js";

const firebaseConfig = {
  apiKey: "AIzaSyCkYbtXdu4SEFAIVUn0XAbxqZr1dqxk5PA",
  authDomain: "overworks-33a39.firebaseapp.com",
  databaseURL: "https://overworks-33a39-default-rtdb.europe-west1.firebasedatabase.app/", // ex: https://ton-projet-default-rtdb.europe-west1.firebasedatabase.app
  projectId: "overworks-33a39",
  storageBucket: "overworks-33a39.firebasestorage.app",
  messagingSenderId: "914912775709",
  appId: "1:914912775709:web:ce6218d6490fd88fa4c0f4"
};
  const app = initializeApp(firebaseConfig);
  const auth = getAuth(app);
  const db = getDatabase(app);

  // ===== UI helpers =====
  const $ = s => document.querySelector(s);
  const $$ = s => Array.from(document.querySelectorAll(s));
  const toast = (msg) => { const t=$('#toast'); t.textContent = msg; t.style.display='block'; clearTimeout(t._to); t._to=setTimeout(()=>t.style.display='none',2000)};
  const uid = () => auth.currentUser?.uid;

  // ===== State =====
  let state = {
    roomId: null,
    isHost: false,
    round: 0,
    phase: 'attente', // attente | playing | results
    duration: 5,
    targetScore: 10,
    micro: null, // {id, seed}
    deadline: null,
    you: null,
    players: {},
  };

  // ===== Auth anon =====
  signInAnonymously(auth).catch(console.error);
  onAuthStateChanged(auth, (u) => {
    if (u) {
      // Presence cleanup if we leave
      window.addEventListener('beforeunload', () => {
        if (state.roomId) remove(ref(db, `rooms/${state.roomId}/players/${u.uid}`));
      });
    }
  });

  // ===== DOM elts =====
  const nameEl = $('#name');
  const roomEl = $('#room');
  const createBtn = $('#create');
  const joinBtn = $('#join');
  const copyBtn = $('#copyLink');
  const startBtn = $('#start');
  const nextBtn = $('#nextRound');
  const durationEl = $('#duration');
  const targetEl = $('#targetScore');

  const stage = $('#stage');
  const timerEl = $('#timer');
  const phaseEl = $('#phase');
  const roundEl = $('#round');
  const playersEl = $('#players');
  const roomBadge = $('#roomBadge');

  // Load from URL ?room=XXXX
  const params = new URLSearchParams(location.search);
  if (params.get('room')) { roomEl.value = params.get('room'); }
  if (params.get('name')) { nameEl.value = params.get('name'); }

  // ===== Room helpers =====
  function code(len=4){
    const alphabet='ABCDEFGHJKLMNPQRSTUVWXYZ23456789';
    let s=''; for(let i=0;i<len;i++) s+=alphabet[Math.floor(Math.random()*alphabet.length)];
    return s;
  }

  async function createRoom(){
    const rid = (roomEl.value || code(4)).toUpperCase();
    const me = uid();
    const now = Date.now();
    await set(ref(db, `rooms/${rid}`), {
      createdAt: now,
      host: me,
      round: 0,
      phase: 'attente',
      duration: Number(durationEl.value)||5,
      target: Number(targetEl.value)||10,
      micro: null
    });
    await joinRoom(rid, true);
  }

  async function joinRoom(rid, asHost=false){
    const me = uid();
    const snap = await get(ref(db, `rooms/${rid}`));
    if (!snap.exists()) { toast('Salle introuvable'); return; }
    state.roomId = rid; state.isHost = asHost || snap.val().host === me;
    roomBadge.textContent = `room: ${rid}`;
    history.replaceState({}, '', `?room=${rid}&name=${encodeURIComponent(nameEl.value||'')}`);

    // Add player
    const pRef = ref(db, `rooms/${rid}/players/${me}`);
    await set(pRef, { name: nameEl.value||'Joueur', score: 0, ready: true, ok: false, updatedAt: Date.now() });
    onDisconnect(pRef).remove();

    // Subscribe room updates
    onValue(ref(db, `rooms/${rid}`), (sn) => {
      if (!sn.exists()) return;
      const r = sn.val();
      state.round = r.round; state.phase = r.phase; state.duration = r.duration; state.targetScore = r.target; state.micro = r.micro; 
      roundEl.textContent = r.round;
      phaseEl.textContent = r.phase;
      renderPlayers(r.players||{});
      if (r.micro) runMicrogame(r.micro);
    });

    toast(`Rejoint: ${rid}`);
  }

  function renderPlayers(players){
    state.players = players;
    playersEl.innerHTML = '';
    Object.entries(players||{}).forEach(([id,p])=>{
      const div = document.createElement('div');
      div.className = 'player'+(id===uid()?' me':'');
      div.innerHTML = `<span>${escapeHtml(p.name)} ¬∑ <span class="muted small">${id===state.isHost?'üëë':''}</span></span>
        <span><strong>${p.score||0}</strong> pts ${p.ok?'<span class="ok">‚úî</span>':'<span class="ko">‚Äî</span>'}</span>`;
      playersEl.appendChild(div);
    });
  }

  function escapeHtml(s){
    return (s||'').replace(/[&<>"']/g, c=>({"&":"&amp;","<":"&lt;",">":"&gt;","\"":"&quot;","'":"&#39;"}[c]));
  }

  // ===== Game flow =====
  async function startGame(){
    if (!state.roomId) return toast('Pas de salle');
    if (!state.isHost) return toast('Seul l‚Äôh√¥te peut lancer');
    await update(ref(db, `rooms/${state.roomId}`), { round: 1, phase: 'playing' });
    await startRound();
  }

  async function startRound(){
    if (!state.roomId || !state.isHost) return;
    // reset OK flags
    const players = state.players || {};
    for (const id of Object.keys(players)){
      await update(ref(db, `rooms/${state.roomId}/players/${id}`), { ok:false });
    }
    const micro = pickMicro();
    const deadline = Date.now() + state.duration*1000;
    await update(ref(db, `rooms/${state.roomId}`), { micro: { ...micro, deadline }, phase:'playing' });
  }

  function pickMicro(){
    const pool = ['click-circle','press-key','type-word'];
    const id = pool[Math.floor(Math.random()*pool.length)];
    return { id, seed: Math.floor(Math.random()*1e9) };
  }

  nextBtn.addEventListener('click', async ()=>{
    if (!state.isHost) return toast('Seul l‚Äôh√¥te');
    const roomRef = ref(db, `rooms/${state.roomId}`);
    const sn = await get(roomRef); if (!sn.exists()) return;
    const r = sn.val();
    const top = Math.max(...Object.values(r.players||{}).map(p=>p.score||0), 0);
    if (top >= (r.target||10)){
      await update(roomRef, { phase:'results', micro:null });
      showWinner(r.players||{});
    } else {
      await update(roomRef, { round:(r.round||0)+1, phase:'playing', micro:null });
      await startRound();
    }
  });

  function showWinner(players){
    const arr = Object.entries(players).map(([id,p])=>p).sort((a,b)=>b.score-a.score);
    stage.innerHTML = `<div class="center" style="flex-direction:column;gap:8px">
      <div style="font-size:22px">üèÜ Fin de partie</div>
      <div><strong>${escapeHtml(arr[0]?.name||'‚Äî')}</strong> gagne avec ${arr[0]?.score||0} pts</div>
    </div>`;
  }

  // ===== Microgames =====
  function runMicrogame(m){
    if (!m) return;
    // countdown UI
    const remaining = Math.max(0, Math.floor((m.deadline - Date.now())/1000));
    timerEl.textContent = remaining;
    clearInterval(timerEl._iv);
    timerEl._iv = setInterval(()=>{
      const left = Math.max(0, Math.floor((m.deadline - Date.now())/1000));
      timerEl.textContent = left;
      if (left<=0) clearInterval(timerEl._iv);
    }, 300);

    if (m.id === 'click-circle') microClickCircle(m);
    if (m.id === 'press-key') microPressKey(m);
    if (m.id === 'type-word') microTypeWord(m);
  }

  async function markOk(){
    if (!state.roomId) return;
    const me = uid();
    const pRef = ref(db, `rooms/${state.roomId}/players/${me}`);
    await update(pRef, { ok:true });
    // +1 point first time we mark ok this round
    const sn = await get(pRef);
    const p = sn.val();
    if (!p._scored){
      await update(pRef, { score:(p.score||0)+1, _scored:true });
      setTimeout(()=>update(pRef, {_scored:null}), 2000); // allow scoring again next round
    }
  }

  function microClickCircle(m){
    const rng = mulberry32(m.seed);
    stage.innerHTML = '';
    const circle = document.createElement('div');
    const size = 60;
    circle.style.cssText = `position:absolute;left:0;top:0;width:${size}px;height:${size}px;border-radius:999px;background:var(--warn);display:flex;align-items:center;justify-content:center;font-weight:700;`;
    circle.textContent = 'CLIQUE';
    stage.appendChild(circle);

    let done=false;
    function move(){
      const w = stage.clientWidth - size; const h = stage.clientHeight - size;
      const x = Math.floor(rng()*w); const y = Math.floor(rng()*h);
      circle.style.transform = `translate(${x}px, ${y}px)`;
    }
    move();
    const iv = setInterval(move, 500);
    circle.addEventListener('click', ()=>{ if(done) return; done=true; clearInterval(iv); circle.style.background='var(--ok)'; circle.textContent='‚úî'; markOk(); });

    setTimeout(()=>{ if(!done){ clearInterval(iv); stage.innerHTML = '<div class="center" style="width:100%;height:100%">‚è±Ô∏è</div>'; } }, Math.max(0,(m.deadline-Date.now())));
  }

  function microPressKey(m){
    const keys = ['A','S','D','F','J','K','L'];
    const target = keys[Math.floor(m.seed % keys.length)];
    stage.innerHTML = `<div class="center" style="flex-direction:column;gap:8px;width:100%;height:100%">
      <div>Appuie sur</div>
      <div class="key" style="font-size:48px;padding:10px 18px">${target}</div>
      <div class="small muted">(clavier)</div>
    </div>`;
    const handler = (e)=>{
      if ((e.key||'').toUpperCase()===target){
        window.removeEventListener('keydown', handler);
        markOk();
        stage.innerHTML = '<div class="center" style="width:100%;height:100%">‚úî</div>';
      }
    };
    window.addEventListener('keydown', handler);
    setTimeout(()=>window.removeEventListener('keydown', handler), Math.max(0,(m.deadline-Date.now())));
  }

  function microTypeWord(m){
    const words = ['EX NIHILO','ORIS','BENTO','ORBE','PIXEL','NOVA','DELTA','JAVA'];
    const target = words[m.seed % words.length];
    stage.innerHTML = `<div class="center" style="flex-direction:column;gap:8px;width:100%;height:100%">
      <div>√âcris ce mot</div>
      <div style="font-size:28px;font-weight:700">${target}</div>
      <input id="typeBox" placeholder="Tape ici" style="width:60%;text-align:center"> 
    </div>`;
    const box = $('#typeBox'); box.focus();
    const chk = ()=>{
      if ((box.value||'').trim().toUpperCase()===target){ markOk(); stage.innerHTML='<div class="center" style="width:100%;height:100%">‚úî</div>'; }
    };
    box.addEventListener('input', chk);
    setTimeout(()=>box && box.removeEventListener('input', chk), Math.max(0,(m.deadline-Date.now())));
  }

  // PRNG for deterministic microgame movement per seed
  function mulberry32(a){
    return function(){
      var t = a += 0x6D2B79F5;
      t = Math.imul(t ^ t >>> 15, t | 1);
      t ^= t + Math.imul(t ^ t >>> 7, t | 61);
      return ((t ^ t >>> 14) >>> 0) / 4294967296;
    }
  }

  // ===== Event listeners =====
  createBtn.addEventListener('click', createRoom);
  joinBtn.addEventListener('click', ()=>{
    const rid = (roomEl.value||'').toUpperCase().trim();
    if (!rid) return toast('Entre un code');
    joinRoom(rid, false);
  });
  copyBtn.addEventListener('click', async ()=>{
    if (!state.roomId){ toast('Pas de salle'); return; }
    const link = location.origin+location.pathname+`?room=${state.roomId}&name=${encodeURIComponent(nameEl.value||'')}`;
    await navigator.clipboard.writeText(link);
    toast('Lien copi√© !');
  });
  startBtn.addEventListener('click', startGame);

  // Reflect UI options to room when host changes values
  durationEl.addEventListener('change', async ()=>{
    if (state.isHost && state.roomId){ await update(ref(db, `rooms/${state.roomId}`), { duration: Number(durationEl.value)||5 }); }
  });
  targetEl.addEventListener('change', async ()=>{
    if (state.isHost && state.roomId){ await update(ref(db, `rooms/${state.roomId}`), { target: Number(targetEl.value)||10 }); }
  });

  // Prefill pseudo from localStorage
  nameEl.value = localStorage.getItem('mw_name') || nameEl.value;
  nameEl.addEventListener('change', ()=>{
    localStorage.setItem('mw_name', nameEl.value||'');
    if (state.roomId) update(ref(db, `rooms/${state.roomId}/players/${uid()}`), { name: nameEl.value||'Joueur' });
  });
</script>
</body>
</html>
